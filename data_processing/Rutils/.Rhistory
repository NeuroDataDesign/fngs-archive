B
B %*% u
B*u
u=array(0, dim=c(2,1))
B+u
B %+% u
source('~/GitHub/memory/Code/R/experiments/kalman_filter.R')
u=array(0, dim=c(1,1))
Q
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=array(rep(1, 2), dim=c(2,1)),
R=diag(2), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=.1^2*diag(2), x0=array(rep(0, 2), dim=c(1,2)))
H=array(rep(1, 2), dim=c(2,1))
H=diag(2)
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=diag(2), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=.1^2*diag(2), x0=array(rep(0, 2), dim=c(1,2)))
R=array(diag(2), dim=c(1,2,2))
R
R[1,,]
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(diag(2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=.1^2*diag(2), x0=array(rep(0, 2), dim=c(1,2)))
filtered$state[,1]
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal2, sinusoid2=signal2)
data
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
mdata[1,]
data[1,]
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(diag(2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=.1^2*diag(2), x0=array(rep(0, 2), dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(diag(2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=.01^2*diag(2), x0=array(rep(0, 2), dim=c(1,2)))
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(diag(2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=.01^2*diag(2), x0=array(rep(0, 2), dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
data[1,]
Q=array(.001, dim=c(1,2))
Q
p0=.01^2*diag(2)
x0=array(0, dim=c(1,2))
t <- dim(Z)[1]
n <- dim(x0)[2]
m <- dim(Z)[2]
# manipulate array inputs to be the correct shape,
# if they are not already
# if somebody passes u as [1, c] and not [t, c]
if (isTRUE(all.equal(dim(u)[1], 1))) {
c = dim(u)[2]
u = array(rep(u, t), dim=c(t, c))
}
# same for Q and R...
if (isTRUE(all.equal(dim(Q)[1], 1))) {
Q = array(rep(Q, t), dim=c(t, n))
}
if (isTRUE(all.equal(dim(R)[1], 1))) {
R = array(rep(R, t), dim=c(t, m))
}
R
R[1,,]
R[1,]
R[1,]
R[2,]
R=array(diag(2), dim=c(1,2,2))
t <- dim(Z)[1]
n <- dim(x0)[2]
m <- dim(Z)[2]
# manipulate array inputs to be the correct shape,
# if they are not already
# if somebody passes u as [1, c] and not [t, c]
if (isTRUE(all.equal(dim(u)[1], 1))) {
c = dim(u)[2]
u = array(rep(u, t), dim=c(t, c))
}
# same for Q and R...
if (isTRUE(all.equal(dim(Q)[1], 1))) {
Q = array(rep(Q, t), dim=c(t, n))
}
if (isTRUE(all.equal(dim(R)[1], 1))) {
R = array(rep(R, t), dim=c(t, m))
}
R
R[1,]
R=array(diag(2), dim=c(1,2,2))
R
require('MASS')
# save key dimensions for O(1) access
t <- dim(Z)[1]
n <- dim(x0)[2]
m <- dim(Z)[2]
# manipulate array inputs to be the correct shape,
# if they are not already
# if somebody passes u as [1, c] and not [t, c]
if (isTRUE(all.equal(dim(u)[1], 1))) {
c = dim(u)[2]
u = array(rep(u, t), dim=c(t, c))
}
# same for Q and R...
if (isTRUE(all.equal(dim(Q)[1], 1))) {
Q = array(rep(Q, t), dim=c(t, n))
}
if (isTRUE(all.equal(dim(R)[1], 1))) {
R = array(rep(R, t), dim=c(t, m, m))
}
R
R[1,]
R[1,,]
R[1,,]
R[,,1]
R[,,1]
R[1,,]
R=array(diag(2), dim=c(1,2,2))
R
Rnew=array(diag(2), dim=c(1,2,2))
Rnew
Rnew = array(rep(R, t), dim=c(t, m, m))
Rnew
Rnew[,1,]
Rnew[,,]
Rnew[1,,]
rep(R)
rep(R, 3)
array(rep(R, 3), dim=c(3, 2, 2))
array(rep(R, 3), dim=c(3, 2, 2))[1,,]
rep(R, 3)
sapply(1:t, function(x) R)
test = sapply(1:t, function(x) R)
dim(test)
R
R[1,,]
dim(test)
test = sapply(1:t, function(x) as.matrix(R))
test
test = sapply(1:t, function(x) R)
test = array(sapply(1:t, function(x) R), dim=c(100, 2, 2))
test
dim(test)
test[1,,]
rep(R, 3)
t(rep(R, 3))
array(t(rep(R, 3)), dim=c(3, 2, 2))
test = array(t(rep(R, 3)), dim=c(3, 2, 2))
test[1,,]
test[1,,]
Rold = R
R = array(0, dim=c(t, m, m))
for (k in 1:t) {
R[k,,] = Rold
}
R
R[1,]
R[1,,]
R[1,,]
# initialize X to the dimensions of the guess and the
# number of observations in the measurement vector
dimX <- c(t, n)
dimP <- c(t, n, n)
X <- array(rep(0, prod(dimX)), dim=dimX)
P <- array(rep(0, prod(dimP)), dim=dimP)
X[1,] <- x0
P[1,,] <- p0
for (k in 2:dim(X)[1]) {
X[k,] <- Fm %*% X[k-1,] + B %*% u[k,]
P[k,,] <- Fm %*% P[k-1,,] %*% t(Fm) + Q[k,]
K <- P[k,,] %*% t(H) %*% ginv(H*P[k,,] %*% t(H) + R[k,])
X[k,] <- X[k,] + K %*% (Z[k,] - H %*% X[k,])
P[k,,] <- P[k,,] - K %*% H %*% P[k,,]
}
dimX <- c(t, n)
dimP <- c(t, n, n)
X <- array(rep(0, prod(dimX)), dim=dimX)
P <- array(rep(0, prod(dimP)), dim=dimP)
X[1,] <- x0
P[1,,] <- p0
# if we don't have the same number of time steps,
# repeat our first series for Q for each timestep
for (k in 2:dim(X)[1]) {
X[k,] <- Fm %*% X[k-1,] + B %*% u[k,]
P[k,,] <- Fm %*% P[k-1,,] %*% t(Fm) + Q[k,]
K <- P[k,,] %*% t(H) %*% ginv(H*P[k,,] %*% t(H) + R[k,,])
X[k,] <- X[k,] + K %*% (Z[k,] - H %*% X[k,])
P[k,,] <- P[k,,] - K %*% H %*% P[k,,]
}
K
X
P
X
k=1
Z
k=2
X[1,]
X[1,]
X[k,] <- Fm %*% X[k-1,] + B %*% u[k,]
X[2,]
P[k,,] <- Fm %*% P[k-1,,] %*% t(Fm) + Q[k,]
Fm
P[k-1,,]
Fm
Q[1,]
Q[1,]
X
K
P[1,,]
P[2,,]
P[3,,]
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- cos(t)
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(diag(2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=.1*diag(2), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
array(c(1,.1,1,.1), dim=c(2,2))
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(diag(2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(1, .1, .1, 1), x0=array(0, dim=c(1,2)))
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- cos(t)
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(diag(2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(c(1, .1, .1, 1), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- cos(t)
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(0, dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(c(1, 0, 0, 1), dim=c(2,2)), x0=array(0, dim=c(1,2)))
cov(Z[,1], Z[,2])
cov(signal1, signal2)
cor(signal1, signal2)
array(signal1, signal2)
signal1
signal2
Z
cor(Z)
cor(signal1, signal2)
cor(signal1, signal2)
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(0, dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(c(1, .3, .3, 1), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
signal1
signal2
plot(signa1)
plot(signal1)
plot(signal2)
plot(signal1 + noise)
plot(signal2+noise)
R=array(c(.01, 0, 0, .01)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- cos(t)
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(c(1, 0, 0, 1), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
source('kalman_filter.R')
require('reshape2')
require('ggplot2')
require(latex2exp)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(c(1, 0, 0, 1), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2) +
ggtitle('Kalman Filtering a Sine Wave with varying noise')
require('reshape2')
require('ggplot2')
require(latex2exp)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(c(.01, 0, 0, .01), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2) +
ggtitle('Kalman Filtering a Sine Wave with varying noise')
require('reshape2')
require('ggplot2')
require(latex2exp)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(c(.01, 0, 0, .01), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2)
data <- data.frame(timestep=t, KF1=filtered$state[,1], KF2=filtered$state[,2], sinusoid1=signal1, sinusoid2 = signal2, noise1=signal1 + noise, noise2=signal2 + noise)
data
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
data <- data.frame(Timestep=t, KF1=filtered$state[,1], KF2=filtered$state[,2], sinusoid1=signal1, sinusoid2 = signal2, noise1=signal1 + noise, noise2=signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.001, dim=c(1,2)),
p0=array(c(.01^2, 0, 0, .01^2), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep=t, KF1=filtered$state[,1], KF2=filtered$state[,2], sinusoid1=signal1, sinusoid2 = signal2, noise1=signal1 + noise, noise2=signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.1, dim=c(1,2)),
p0=array(c(.01, 0, 0, .01), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep=t, KF1=filtered$state[,1], KF2=filtered$state[,2], sinusoid1=signal1, sinusoid2 = signal2, noise1=signal1 + noise, noise2=signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.0001, dim=c(1,2)),
p0=array(c(.01, 0, 0, .01), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep=t, KF1=filtered$state[,1], KF2=filtered$state[,2], sinusoid1=signal1, sinusoid2 = signal2, noise1=signal1 + noise, noise2=signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
Fm=diag(2)
u=array(0, dim=c(1,1))
B=array(0, dim=c(2, 1))
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.0001, dim=c(1,2)),
p0=array(c(.01, .1, .1, .01), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep=t, KF1=filtered$state[,1], KF2=filtered$state[,2], sinusoid1=signal1, sinusoid2 = signal2, noise1=signal1 + noise, noise2=signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.0001, dim=c(1,2)),
p0=array(c(.1, , 0, .1), dim=c(2,2)), x0=array(0, dim=c(1,2)))
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
noise <- rnorm(100, mean=0, sd=.1)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(.01, 0, 0, .01), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.0001, dim=c(1,2)),
p0=array(c(.1, 0, 0, .1), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep=t, KF1=filtered$state[,1], KF2=filtered$state[,2], sinusoid1=signal1, sinusoid2 = signal2, noise1=signal1 + noise, noise2=signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata, size=1.2)
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
sd <- .1
noise <- rnorm(100, mean=0, sd=sd)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(sd^2, 0, 0, sd^2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.0001, dim=c(1,2)),
p0=array(c(sd^2, 0, 0, sd^2), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2, noise1=signal1 + noise, noise2 = signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata[mdata$variable != "noise1" | mdata$variable != "noise2",], size=1.2) +
geom_line(data = mdata[mdata$variable == "noise1" | mdata$variable == "noise2",], size=.5, linetype='dotdash') +
ggtitle('Kalman Filtering Multiple Sine Waves')
source('kalman_filter.R')
source('~/GitHub/memory/Code/R/experiments/kalman_filter.R')
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
sd <- .1
noise <- rnorm(100, mean=0, sd=sd)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(sd^2, 0, 0, sd^2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.0001, dim=c(1,2)),
p0=array(c(sd^2, 0, 0, sd^2), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2, noise1=signal1 + noise, noise2 = signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata[mdata$variable != "noise1" | mdata$variable != "noise2",], size=1.2) +
geom_line(data = mdata[mdata$variable == "noise1" | mdata$variable == "noise2",], size=.5, linetype='dotdash') +
ggtitle('Kalman Filtering Multiple Sine Waves')
t <- seq(0, 4*pi,,100)  # simple vector
signal1 <- sin(t)
signal2 <- signal1 + 2
signal2 <- cos(t) + 2
sd <- .1
noise <- rnorm(100, mean=0, sd=sd)
Z <- array(signal1 + noise, dim=c(100, 2))
Z[,2] <- signal2+noise
filtered <- kalman_filter(Fm=diag(2),Z=Z, H=diag(2),
R=array(c(sd^2, 0, 0, sd^2), dim=c(1,2,2)), u=array(0, dim=c(1,1)),
B=array(0, dim=c(2, 1)), Q=array(.0001, dim=c(1,2)),
p0=array(c(sd^2, 0, 0, sd^2), dim=c(2,2)), x0=array(0, dim=c(1,2)))
data <- data.frame(Timestep = t, KF1=filtered$state[,1], KF2=filtered$state[,2],
sinusoid1=signal1, sinusoid2=signal2, noise1=signal1 + noise, noise2 = signal2 + noise)
mdata <- melt(data, id=c("Timestep"))
ggplot(data = mdata, aes(x=Timestep, y=value, group=variable, color=variable)) +
geom_line(data = mdata[mdata$variable != "noise1" | mdata$variable != "noise2",], size=1.2) +
geom_line(data = mdata[mdata$variable == "noise1" | mdata$variable == "noise2",], size=.5, linetype='dotdash') +
ggtitle('Kalman Filtering Multiple Sine Waves')
