sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t), simplify='array'), simplify='array')
test = sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t), simplify='array'), simplify='array')
dim(test)
apply(x=test, MARGIN = 3, FUN = sum)
apply(X=test, MARGIN = 3, FUN = sum)
apply(X=test, MARGIN = c(1,2), FUN = sum)
sum(test)
apply(X=test, MARGIN = c(1,2), FUN = sum)
b = apply(X=test, MARGIN = c(1,2), FUN = sum)
dim(b)
b
dim(b)
dim(b)
dim(test)
test[1,1,1] + test[1,1,2] + test[1,1,3] + test[1,1,4] + test[1,1,5]
b[1,1]
test[10,1,1] + test[10,1,2] + test[10,1,3] + test[10,1,4] + test[10,1,5]
b[10,1]
test[10,5,1] + test[10,5,2] + test[10,5,3] + test[10,5,4] + test[10,5,5]
b[10,5]
nsub <- 20
ntrial <- 2
nroi <- 20
nt <- 200
nsin <- 5
signal <- array(NaN, dim=c(nsub*ntrial, nroi, nt))
# array of the amplitudes
a <- array(runif(nsub*nroi*nsin, min=0, max=1), dim=c(nsub, nroi, nsin))
# sample random period lengths between 0 and nt/2, nsin per subject
p <- array(sample.int(n = nt/2, size=(nsin*nroi*nsub), replace=TRUE), dim=c(nsub, nroi, nsin))
# define every subject to have approximately the same noise
sig <- .1
t <- 0:(nt-1)
for (sub in 1:nsub) {
for (trial in 1:ntrial) {
x <- ntrial*(sub - 1) + trial
signal[x,,] <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
}
}
dim(signal)
signal[1,1,] == signal[2,1,]
signal <- signal + array(sig*rnorm(nsub*ntrial*nroi*nt), dim=c(nsub*ntrial, nroi, nt))
signal[1,1,]
signal[2,1,]
signal[1,1,1:20]
signal[2,1,1:20]
1 %% 2
2 %% 2
signal <- sapply(1:nsub*ntrial, function(x) {
sub <- x-1 %% ntrials
apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
}, USE.NAMES=TRUE, simplify=FALSE)
signal <- sapply(1:nsub*ntrial, function(x) {
sub <- x-1 %% ntrial
apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
}, USE.NAMES=TRUE, simplify=FALSE)
x = 39
x/2
floor(x/2)
signal <- sapply(1:nsub*ntrial, function(x) {
sub <- ceiling(x/2)
apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
}, USE.NAMES=TRUE, simplify=FALSE)
test[10,5,1] + test[10,5,2] + test[10,5,3] + test[10,5,4] + test[10,5,5]
signal[10,5,]
dim(signal)
names(signal)
signal
signal[[1]]
test[10,5,1] + test[10,5,2] + test[10,5,3] + test[10,5,4] + test[10,5,5]
dim(signal[[10]])
signal[[0]]
signal[[1]]
test
dim(test)
history
history()
sub
r
r <- 5
sub <- 10
apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
test = apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub
signal[[10]] == test
signal <- sapply(signal, function(sig) sig + array(sig*rnorm(nsub*ntrial*nroi*nt), dim=c(nsub*ntrial, nroi, nt),
USE.NAMES=TRUE, simplify=FALSE)
)
signal <- sapply(signal, function(sig) sig + array(sig*rnorm(nsub*ntrial*nroi*nt), dim=c(nsub*ntrial, nroi, nt),
,simplify='array'),
USE.NAMES=TRUE, simplify=FALSE)
signal <- sapply(signal, function(sig) sig + array(sig*rnorm(nsub*ntrial*nroi*nt), dim=c(nsub*ntrial, nroi, nt)),
USE.NAMES=TRUE, simplify=FALSE)
b = array(sig*rnorm(nsub*ntrial*nroi*nt), dim=c(nsub*ntrial, nroi, nt))
dim(b)
b=array(sig*rnorm(nroi*nt), dim=c(nroi, nt))
dim(b)
dim(signal[[1]])
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_individual_mnr.R')
dim(ts[[1]])
nsub <- 20
ntrial <- 2
nroi <- 20
nt <- 200
nsin <- 5
signal <- array(NaN, dim=c(nsub*ntrial, nroi, nt))
# array of the amplitudes
a <- array(runif(nsub*nroi*nsin, min=0, max=1), dim=c(nsub, nroi, nsin))
# sample random period lengths between 0 and nt/2, nsin per subject
p <- array(sample.int(n = nt/2, size=(nsin*nroi*nsub), replace=TRUE), dim=c(nsub, nroi, nsin))
# define every subject to have approximately the same noise
sig <- .1
t <- 0:(nt-1)
signal <- sapply(1:nsub*ntrial, function(x) {
sub <- ceiling(x/2)
apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
}, USE.NAMES=TRUE, simplify=FALSE)
signal <- sapply(signal, function(sig) sig + array(sig*rnorm(nroi*nt), dim=c(nt, nroi)),
USE.NAMES=TRUE, simplify=FALSE)
signal
signal[[1]]
signal[[1]][1:5,]
a
dim(a)
signal[[1]][1:5,]
signal <- sapply(1:nsub*ntrial, function(id) {
sub <- ceil(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
signal <- sapply(1:nsub*ntrial, function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
rnorm(n = nt*nroi, mean=0, sd=sd)
sd
sd_err <- .1
t <- 0:(nt-1)
signal <- sapply(1:nsub*ntrial, function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd_err), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
dim(signal)
signal[[1]]
signal[[1]][1:5]
signal[[2]][1:5]
sd_err <- 0
t <- 0:(nt-1)
signal <- sapply(1:nsub*ntrial, function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd_err), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
signal[[1]][1:5]
signal[[2]][1:5]
signal[[0]]
rnorm(100, mean=0, sd=0)
signal[[1]]
dim(signal[[1]])
signal[[1]][1:5,]
signal[[1]][1:5,1]
signal[[2]][1:5,1]
sub <- 1
apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)[1:5,1]
signal[[1]][1:5,1]
2/ntrial
ceiling(2/ntrial)
ceiling(1/ntrial)
signal <- sapply(1:nsub*ntrial, function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd_err), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
length(signal)
1:nsub*ntrial
seq(from=1, to=nsub*ntrial, by=1)
signal <- sapply(seq(from=1, to=nsub*ntrial, by=1), function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd_err), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
signal[[1]][1:5,1]
signal[[2]][1:5,1]
signal[[3]][1:5,1]
signal[[4]][1:5,1]
sd_err <- .1
t <- 0:(nt-1)
signal <- sapply(seq(from=1, to=nsub*ntrial, by=1), function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd_err), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
signal[[2]][1:5,1]
signal[[1]][1:5,1]
signal[[3]][1:5,1]
signal <- sapply(seq(from=1, to=nsub*ntrial, by=1), function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd_err), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
fft_sig <- obs2fft(signal)
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
signal <- sapply(seq(from=1, to=nsub*ntrial, by=1), function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd_err), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
fft_sig <- obs2fft(signal)
fft_sig[[1]]
fft_sig
obs2fft(signal)
signal <- sapply(seq(from=1, to=nsub*ntrial, by=1), function(id) {
sub <- ceiling(id/ntrial)
sub_sig <- apply(X=sapply(1:nsin, function(i) sapply(1:nroi, function(r) a[sub,r,i]*sin(p[sub,r,i]*t),
simplify='array'),
simplify='array'), MARGIN = c(1,2), FUN=sum)
sub_sig <- sub_sig + array(rnorm(n = nt*nroi, mean=0, sd = sd_err), dim=c(nt, nroi))
return(sub_sig)
}, USE.NAMES=TRUE, simplify=FALSE)
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
fft_sig <- obs2fft(signal)
obs2fft(signal)
fft_sig[[1]]
fft_sig[[2]]
fft_sig[[1]][1:5]
fft_sig[[2]][1:5]
fft_sig[[3]][1:5]
fft_sig[[4]][1:5]
test = fft_sig[[1]]
dim(test)
sum(test)
apply(test, MARGIN = 2, FUN=sum)
b = apply(test, MARGIN = 2, FUN=sum)
b
dim(test)
test/b
test2 = test/b
sum(test2[1,])
sum(test2[2,])
sum(test2[3,])
sum(test[1,])
test2 = test %*% diag(1/b)
sum(test2[3,])
b
test
apply(test, MARGIN=2, FUN=sum)
b = apply(test, MARGIN=2, FUN=sum)
sum(test[1,])
dim(test)
sum(test[,1])
sum(test2[,1])
test2 = test/b
sum(test2[,1])
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
fft_sig <- obs2fft(signal)
sum(fft_sig[[1]][,1])
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2fft.R')
fft_sig <- obs2fft(signal)
sum(fft_sig[[1]][,1])
fft_sig[[1]]
fft_sig[[1]][1:5,]
fft_sig[[1]][1:5,1]
fft_sig[[2]][1:5,1]
fft_sig[[4]][1:5,1]
fft_sig[[3]][1:5,1]
fft_sig[[3]][50:60,1]
fft_sig[[4]][50:60,1]
fft_sig[[1]][50:60,1]
fft_sig[[2]][50:60,1]
a = rnorm(5)
a
b=rnorm(5)
b
a
log(a/b)
a/b
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2pow.R')
# get the amplitude spectrum
amp_sig <- obs2amp(signal)
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2amp.R')
# get the amplitude spectrum
amp_sig <- obs2amp(signal)
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2amp.R')
amp_sig <- obs2amp(signal)
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2amp.R')
amp_sig <- obs2amp(signal)
amp_sig[[1]]
amp_sig[[1]][1:5,1]
amp_sig[[2]][1:5,1]
amp_sig[[3]][1:5,1]
amp_sig[[4]][1:5,1]
amp_sig[[4]][50:60,1]
amp_sig[[3]][50:60,1]
amp_sig[[1]][50:60,1]
amp_sig[[2]][50:60,1]
sum(amp_sig[[1]]][,1])
sum(amp_sig[[1]][,1])
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2amp.R')
sum(amp_sig[[1]][,1])
amp_sig <- obs2amp(signal)
sum(amp_sig[[1]][,1])
amp_sig[[1]][50:60,1]
amp_sig[[2]][50:60,1]
amp_sig[[4]][50:60,1]
amp_sig[[3]][50:60,1]
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2amp.R')
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/amp2div.R')
# get the amplitude spectrum
amp_sig <- obs2amp(signal)
div_sub <- amp2div(amp_sig)
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2amp.R')
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/amp2div.R')
# get the amplitude spectrum
amp_sig <- obs2amp(signal)
div_sub <- amp2div(amp_sig)
dim(amp_sig)
dim(amp_sig[[1]])
dim(amp_sig[[1]])[2]
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/amp2div.R')
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2amp.R')
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/amp2div.R')
# get the amplitude spectrum
amp_sig <- obs2amp(signal)
div_sub <- amp2div(amp_sig)
div_sub[[1]]
div_sub[[2]]
div_sub[[3]]
div_sub[[4]]
test1 = div_sub[[4]]
test2 = div_sub[[3]]
1/sqrt(2)*norm(sqrt(test1)-sqrt(test2), "f")
length(div_sub)
amp_sig <- obs2amp(signal)
div <- amp2div(amp_sig)
dist <- div2dist(div)
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2amp.R')
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/amp2div.R')
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/div2dist.R')
# get the amplitude spectrum
amp_sig <- obs2amp(signal)
div <- amp2div(amp_sig)
dist <- div2dist(div)
dist
melt(dist)
test = melt(dist)
names(test)
test[1,]
distance_plot <- ggplot(melt(dist), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance") +
xlab("Scan") + ylab("Scan") + ggtitle("Simulated Dataset Spectral Approach") +
theme(text=element_text(size=20))
distance_plot
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/R/processing/kde_subject.R')
kdeobj <- kde_subject(dist, ids)
ids <- floor(1:40/2)
ids
ids <- ceiling(1:40/2)
kdeobj <- kde_subject(dist, ids)
ids
kdeobj
ids <- ceiling(1:40/2)
kdeobj <- kde_subject(dist, ids)
kde_dist <- data.frame(kdeobj[[1]]$y, kdeobj[[2]]$y, kdeobj[[1]]$x)
melt(kde_dist)
test = melt(kde_dist)
kde_dist <- data.frame(kdeobj[[1]]$y, kdeobj[[2]]$y, kdeobj[[1]]$x)
kde_dist
kde_dist[1,]
kde_dist <- data.frame(x=kdeobj[[1]]$y, y=kdeobj[[2]]$y, distance=kdeobj[[1]]$x)
kde_dist[1,]
ids <- ceiling(1:40/2)
kdeobj <- kde_subject(dist, ids)
kde_dist <- data.frame(x=kdeobj[[1]]$y, y=kdeobj[[2]]$y, distance=kdeobj[[1]]$x)
colnames(kde_dist) <- c("intra", "inter", "distance")
meltkde <- melt(kde_dist, id="distance")
colnames(meltkde) <- c("distance", "Relationship", "Probability")
distance_plot <- ggplot(melt(dist), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance") +
xlab("Scan") + ylab("Scan") + ggtitle("Simulated Dataset Spectral Approach") +
theme(text=element_text(size=20))
kde_plot <- ggplot() +
geom_ribbon(data=meltkde, aes(x=distance, ymax=Probability, fill=Relationship), ymin=0, alpha=0.5) +
ggtitle("Subject Relationships") + theme(text=element_text(size=20))
kde_plot
inpath <- 'C:/Users/ebrid/Documents/R/FNGS_results/fngs_fnirt_v3/BNU1/desikan_2mm/'
tsnames <- list.files(inpath, pattern="\\.rds", full.names=TRUE)
scan_pos = 3
tsobj <- open_timeseries(tsnames, sub_pos=scan_pos)
ts <- tsobj[[1]]
ids <- tsobj[[3]]
ids
amp_sig[[1]]
amp_sig[[2]]
amp_sig[[3]]
amp_sig[[1]]
amp_sig[[2]]
amp_sig[[3]]
amp_sig[[4]]
amp_sig[[5]]
amp_sig[[6]]
dim(amp_sig[[6]])
amp_sig[[6]][50:60,]
amp_sig <- obs2amp(signal)
div <- amp2div(amp_sig)
dist <- div2dist(div)
kdeobj <- kde_subject(dist, ids)
kde_dist <- data.frame(x=kdeobj[[1]]$y, y=kdeobj[[2]]$y, distance=kdeobj[[1]]$x)
colnames(kde_dist) <- c("intra", "inter", "distance")
meltkde <- melt(kde_dist, id="distance")
colnames(meltkde) <- c("distance", "Relationship", "Probability")
distance_plot <- ggplot(melt(dist), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance") +
xlab("Scan") + ylab("Scan") + ggtitle('Distance Matrix Spectral Approach')
kde_plot <- ggplot() +
geom_ribbon(data=meltkde, aes(x=distance, ymax=Probability, fill=Relationship), ymin=0, alpha=0.5) +
ggtitle('Subject Relationships')
multiplot(distance_plot, kde_plot, layout=matrix(c(1,2), nrow=1, byrow=TRUE))
dim(dist)
source('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/Rutils/open_timeseries.R')
inpath <- 'C:/Users/ebrid/Documents/R/FNGS_results/fngs_fnirt_v3/BNU1/desikan_2mm/'
tsnames <- list.files(inpath, pattern="\\.rds", full.names=TRUE)
scan_pos = 3
tsobj <- open_timeseries(tsnames, sub_pos=scan_pos)
signal <- tsobj[[1]]
ids <- tsobj[[3]]
amp_sig <- obs2amp(signal)
div <- amp2div(amp_sig)
dist <- div2dist(div)
dist
amp_sig <- obs2amp(signal)
div <- amp2div(amp_sig)
distmtx <- div2dist(div)
kdeobj <- kde_subject(distmtx, ids)
kde_dist <- data.frame(x=kdeobj[[1]]$y, y=kdeobj[[2]]$y, distance=kdeobj[[1]]$x)
colnames(kde_dist) <- c("intra", "inter", "distance")
meltkde <- melt(kde_dist, id="distance")
colnames(meltkde) <- c("distance", "Relationship", "Probability")
distmtx
distmtx[1,2]
distmtx[1,3]
distmtx[1,4]
distmtx[1,5]
distmtx[1,6]
distmtx[1,7]
distmtx[1,]
amp_sig[1,]
amp_sig[]
amp_sig[[1]]
dim(amp_sig[[1]])
dim(amp_sig[[1]][50:60,1])
amp_sig[[1]][50:60,1]
amp_sig[[2]][50:60,1]
amp_sig[[3]][50:60,1]
sum(amp_sig[[1]][,1])
sum(amp_sig[[1]][,2])
sum(amp_sig[[1]][,3])
