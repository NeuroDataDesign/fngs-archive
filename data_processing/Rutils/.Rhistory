file <- open('R/contigs.fasta')
file <- read('R/contigs.fasta')
input <- file('stdin', 'r')
input
input <- file('R/contigs.fasta', 'r')
input
input.readLines()
readLines(input)
input[1]
input[]
input[1,:]
input(1)
input[2]
input[3]
lines <- readLines(input)
lines[1]
lines[2]
lines[0]
lines
lines
lines <- readLines(input)
row <- readLines(input, '1')
row
row <- readLines(input, n=1)
row
input
readLines(input)
input <- file('R/contigs.fasta', 'r')
row <- readLines(input)
row[1]
row[2]
row[3]
row[1,1]
row[1][1]
row[1][[1]]
substring(row[1])
substring(row[1],1)
substring(row[1],1,1)
size(row)
length(row)
dim(row)
dim(row)
length(row)
for i in 1:length(row)
for (i in 1:length(row))
{}
isTRUE(all.equal(substring(row[1],1,1), ">")
)
V <- c(4,5,6)
sum(V)
row[2]
nchar(row[2])
print(5)
new_df <- data.frame(size=character(), time=integer(), method=character())
View(new_df)
len(new_df)
size(new_df)
length(new_df)
a <- numeric(6)
a
a[0]
a[1]
rnorm(300, .99, .2)
a = rnorm(300, .99, .2)
plot(a)
test = kde(a)
library('stats')
test = kernel(a)
test = density(a)
plot(test)
a[a>1] = 1
plot(test)
test = density(a)
plot(test)
max(a)
maxoverlap = test
a = rnorm(300, .75, .3)
test = density(a)
minoverlap=test
maxoverlap=melt(maxoverlap)
library('ggplot')
library('ggplot2')
maxoverlap=melt(maxoverlap)
library('reshape')
maxoverlap=melt(maxoverlap)
maxoverlap
maxoverlap <- data.frame(maxoverlap$x, maxoverlap$y)
maxoverlap
minoverlap <- data.frame(minoverlap$x, minoverlap$y)
a = rnorm(100, mean=.98, sd = .1)
b = rnorm(100, mean=.85, sd = .3)
a=density(a)
b=density(b)
a = rnorm(100, mean=.98, sd = .1)
b = rnorm(100, mean=.85, sd = .3)
testa=density(a)
testb=density(b)
minx = min(c(testa$x, testb$x))
minx
plot(testa)
a[a>1] = 1
b[b>1] = 1
plot(a)
testa=density(a)
testb=density(b)
plot(testa)
plot(testb)
minx = min(c(testa$x, testb$x))
maxx = max(c(testa$x, testb$x))
maxx
minx
bw = mean(c(testa$bw, testb$bw))
bw
testa=density(a, from=minx, to=maxx, bw=bw)
plot(testa)
testb=density(b, from=minx, to=maxx, bw=bw)
plot(testb)
testb=density(b, from=minx, to=maxx)
plot(testb)
testb=density(b, from=minx, to=maxx)
testa=density(a, from=minx, to=maxx)
plot(testa)
dice=data.frame(testa$y, testb$y, testa$x)
colnames(dice) <- c("After MC", "Before MC", "Normalized DICE coefficient")
dice
dice[1,]
melt(dice, id='Normalized DICE coefficient')
dicedata = melt(dice, id='Normalized DICE coefficient')
dicedata[1,]
ggplot(data = dicedata, aes(x = 'Normalized DICE coefficient', fill=variable), alpha = 0.5) + geom_ribbon()
ggplot(data = dicedata, aes(x = 'Normalized DICE coefficient', fill=variable, ymin=0, ymax=1) alpha = 0.5) + geom_ribbon()
ggplot(data = dicedata, aes(x = 'Normalized DICE coefficient', fill=variable, ymin=0, ymax=1), alpha = 0.5) + geom_ribbon()
ggplot(data = dicedata, aes(x = 'Normalized DICE coefficient', fill=variable, ymin=0, ymax=value), alpha = 0.5) + geom_ribbon()
ggplot(data = dicedata, aes(x = 'Normalized DICE coefficient', fill=variable, ymax=value), ymin=0, alpha = 0.5) + geom_ribbon()
ggplot(data = dicedata, aes(x = 'Normalized DICE coefficient', fill=variable, ymin=0,ymax=value), alpha = 1) + geom_ribbon()
ggplot(data = dicedata, aes(x = 'Normalized DICE coefficient', fill=variable, ymin=0,ymax=value)) + geom_ribbon()
dicedata[1:10,]
dice
dice[1,]
dicedata = melt(dice, id='Normalized DICE coefficient')
dicedata
dicedata[1:200,]
dicedata[1,]
max(dicedata$value)
plot(testa)
plot(testb)
ggplot(data = dicedata, aes(x = 'Normalized DICE coefficient', fill=variable, ymin=0,ymax=value)) + geom_ribbon()
colnames(dicedata) <- c("dice", "variable", "value")
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon()
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("NOrmalized DICE coefficient"), ylab("Density")
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("NOrmalized DICE coefficient")+ ylab("Density")
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density")
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + geom_title("DICE Comparisons before and after MC")
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + title("DICE Comparisons before and after MC")
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + title("DICE Comparisons before and after MC")
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + ggtitle("DICE Comparisons before and after MC")
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + ggtitle("DICE Comparisons before and after MC") + theme(text.size=20)
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + ggtitle("DICE Comparisons before and after MC") + theme(text=element_text(size=20))
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value), alpha=0.5) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + ggtitle("DICE Comparisons before and after MC") + theme(text=element_text(size=20))
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value), alpha=0.5) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + ggtitle("DICE Comparisons before and after MC") + theme(text=element_text(size=20))
\
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value), alpha=0.5) + geom_ribbon() + xlab("Normalized DICE coefficient")+ ylab("Density") + ggtitle("DICE Comparisons before and after MC") + theme(text=element_text(size=20))
ggplot(data = dicedata, aes(x =dice, fill=variable, ymin=0,ymax=value)) + geom_ribbon(alpha=0.5) + xlab("Normalized DICE coefficient")+ ylab("Density") + ggtitle("DICE Comparisons before and after MC") + theme(text=element_text(size=20))
install.packages('oro.nifti')
install.packages('SimpleITK')
library('oro.nifti')
brain = readNIfTI('GitHub/memory/data/subjects/sub-51_anat.nii.gz')
brain
brain
orthographic(brain)
orthographic(brain, xyz = c(30, 30, 20))
orthographic(brain, xyz = c(40, 40, 40))
orthographic(brain, xyz = c(100, 100, 100))
source('~/GitHub/Reliability/Code/FlashRupdated/functions/reliability.R')
source('~/GitHub/Reliability/Code/R/processing/open_graphs.R')
require('ggplot2')
require('reshape2')
source('~/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
require('ggplot2')
require('reshape2')
list.files('../Documents/R/for_fngs/desikan/', pattern="\\.graphml", full.names=TRUE)
fnames = list.files('../Documents/R/for_fngs/desikan/', pattern="\\.graphml", full.names=TRUE)
pwd()
fnames = list.files('../Documents/R/for_fngs/desikan/', pattern="\\.graphml", full.names=TRUE)
fnames[1]
fnames[0]
fnames[2]
length(fnames)
fnames[1]
fnames[1]
fnames[1]
fnames[1]
parsed_graphs = open_graphs(fnames, scan_pos=2)
graphs = parsed_graphs[[1]]
parsed_graphs = open_graphs(fnames, scan_pos=2)
wgraphs <- parsed_graphs[[1]]
ids <- parsed_graphs[[2]]
dim(wgraphs)
dim(ids)
dim(ids)
length(ids)
ids
source('~/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
split help
str.split
strsplit
strsplit(fnames, split="_")
myarr <- c()
ids <- c()
splitfnames = strsplit(fnames, split="_")
length(splitfnames)
sapply(x, 1:length(splitfnames), mvarr <- c(myarr, splitfnames[[1]][2]))
sapply(x <- 1:length(splitfnames), mvarr <- c(myarr, splitfnames[[x]][2]))
sapply(1:length(splitfnames), function(x) {mvarr <- c(myarr, splitfnames[[x]][2])})
sapply(1:length(splitfnames), function(x) {mvarr <- c(myarr, splitfnames[[x]][3])})
ids = sapply(1:length(splitfnames), function(x) {mvarr <- c(myarr, splitfnames[[x]][3])})
ids
length(ids)
source('~/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
dist = distance(wgraphs)
dist
dim9dist)
dim(dist)
dim(dist)
r = rdf(dist, ids)
m = mnr(rdf)
rdf
m = mnr(r)
m
m
Dmax = dist
maxmnr = m
pdist <- ggplot(melt(Dmax), aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color="white") +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance")
pdist
source('~/GitHub/Reliability/Code/R/processing/hell_dist.R')
hd = hell_dist(dist, ids)
kde = data.frame(hd[[1]]$y, hd[[2]]$y, hd[[1]]$x)
kde[1,]
colnames(kde) <-c("intra", "inter", "dist")
meltkde = melt(kde, id=dist)
meltkde = melt(kde, id='dist')
meltkde
meltkde[1,]
pkde <- ggplot() + geom_ribbon(data=meltkde, aes(x = 'dist', ymax = 'value', fill='variable', ymin=0, alpha=0.5))
pkde
pkde <- ggplot() + geom_ribbon(data=meltkde, aes(x = 'dist', ymax = value, fill=variable, ymin=0, alpha=0.5))
pkde
ggplot() + geom_ribbon(data=meltkde, aes(x = 'dist', ymax = value, fill=variable, ymin=0, alpha=0.5))
meltkde[1,]
ggplot() + geom_ribbon(data=meltkde, aes(x = dist, ymax = value, fill=variable, ymin=0, alpha=0.5))
ggplot() + geom_ribbon(data=meltkde, aes(x = dist, ymax = value, fill=variable, ymin=0), alpha=0.5)
readRDS(file:///C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/fngs_v1/rds_files/NKI_0021001_1_rest_desikan_2mm.rds)
readRDS('/C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/fngs_v1/rds_files/NKI_0021001_1_rest_desikan_2mm.rds')
readRDS('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/fngs_v1/rds_files/NKI_0021001_1_rest_desikan_2mm.rds')
test = readRDS('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/fngs_v1/rds_files/NKI_0021001_1_rest_desikan_2mm.rds')
test
test = readRDS('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/fngs_v1/rds_files/NKI_0021001_1_rest_desikan_2mm.rds')
test
test = readRDS('C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/fngs_v1/rds_files/NKI_0021001_1_rest_desikan_2mm.rds')
test
dim(test)[1]
dim(test)[2]
dim(test)[0]
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/perform_correlation.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/perform_correlation.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/perform_correlation.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/open_timeseries.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/perform_correlation.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/perform_correlation.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/open_timeseries.R')
tsnames[1]
tsnames[2]
readRDS(tsnames[2])
dim(readRDS(tsnames[2]))
dim(readRDS(tsnames[1]))
dim(readRDS(tsnames[3]))
dim(readRDS(tsnames[4]))
dim(readRDS(tsnames[5]))
dim(readRDS(tsnames[6]))
dim(readRDS(tsnames[7]))
dim(readRDS(tsnames[8]))
dim(readRDS(tsnames[9]))
readRDS('C:/Users/ebrid/Documents/NKI_0021001_1_rest_desikan_2mm.rds')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/perform_correlation.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/perform_correlation.R')
dim(tsobj[[1]][[1]])
dim(tsobj[[1]][[1]][1:20])
dim(tsobj[[1]][[1]][1:20,])
tsobj[[1]][[1]][1:20]
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/ts2cor.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2corr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/obs2corr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
ts
signal_data <- ts
zscore_data <- list()
subjects <- names(signal_data)
for (subject in subjects) {
zscore_data[[subject]] <- t(scale(t(signal_data[[subject]]), center=TRUE, scale=TRUE))
}
subjects
names(signal_data)
signal_data[[1]]
names(signal_data)
str(1)
paste(1)
paste(1)
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
length(corr)
dim(corr[["1"]][1])
corr[["1"]][1]
corr[["1"]][,]
dim(corr[["1"]][,])
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/open_timeseries.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/Reliability/Code/R/processing/thresh_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
mnrrank
mnrrank
require('Rmisc')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
# an example of a driver that loads timeseries data and produces
# a dataset wide distance estimation (along with mnr) and kde plot
# in a figure
#
# written by Eric Bridgeford
dirn <- dirname(parent.frame(2)$ofile)
dirn <- dirname(sys.frame(1)$ofile)
setwd(dirn)
## Sources ----------------------------------------------------------------------------------------
source('open_timeseries.R')
source('signal2zscore.R')
source('obs2corr.R')
require('ggplot2')
require('reshape2')
require('Rmisc')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/reliability.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/computerank.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/R/processing/hell_dist.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/R/processing/thresh_mnr.R')
## Loading Timeseries --------------------------------------------------------------------------------
gpath <- 'C:/Users/ebrid/Documents/GitHub/ugrad-data-design-team-0/data_processing/fngs_v1/rds_files/'
tsnames <- list.files(gpath, pattern="\\.rds", full.names=TRUE)
tsobj <- open_timeseries(tsnames, scan_pos=2)
ts <- tsobj[[1]]
sub <- tsobj[[2]]
zsc <- signal2zscore(ts)
corr <- obs2corr(zsc)
## Change Convention from preferred vara[[sub]][array] to vara[sub,array] for use with old code ---------
nroi <- dim(corr[["1"]])[1]
nscans <- length(corr)
wgraphs <- array(rep(NaN, nroi*nroi*nscans), c(nroi, nroi, nscans))
counter <- 1
for (subject in names(corr)) {
wgraphs[,,counter] <- corr[[subject]]
counter <- counter + 1
}
## Compute MNR ----------------------------------------------------------------
thresh_obj <- thresh_mnr(wgraphs, sub)
mnrthresh <- thresh_obj[[1]]
Dthresh <- thresh_obj[[2]]
ranked_graphs <- rank_matrices(wgraphs)
Drank <- distance(ranked_graphs)
mnrrank <- mnr(rdf(Drank, sub))
if (mnrthresh > mnrrank) {
maxmnr <- mnrthresh
Dmax <- Dthresh
winner <- 'thresh'
} else {
maxmnr <- mnrrank
Dmax <- Drank
winner <- 'rank'
}
## Produce Plots for MNR --------------------------------------------------------
kdeobj <- hell_dist(Dmax, sub)
kde_dist <- data.frame(kdeobj[[1]]$y, kdeobj[[2]]$y, helldist[[1]]$x)
colnames(kde_dist) <- c("intra subject", "inter subject", "Graph Distance")
meltkde <- melt(kde_dist, id="Graph Distance")
colnames(meltkde) <- c("Graph Distance", "Relationship", "Probability")
distance_plot <- ggplot(melt(Dmax), aes(x=Var1, y=Var2, fill=value)) +
geom_tile(color="white") +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance") +
xlab("Scan") + ylab("Scan") + ggtitle(paste(sprintf('mnr = %.4f, best = %s'), maxmnr, winner))
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
distance_pplot
distance_plot
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
kde_plot
multiplot(distance_plot, kde_plot)
multiplot(distance_plot, kde_plot, layout=as.matrix([1, 2], dim=c(1,2)))
multiplot(distance_plot, kde_plot, layout=as.matrix(c(1,2)), dim=c(1,2)))
multiplot(distance_plot, kde_plot, layout=as.matrix(c(1,2), dim=c(1,2)))
multiplot(distance_plot, kde_plot, layout=as.matrix(c(1,2), dim=c(2,1)))
as.matrix(c(1,2), dim=c(2,1))
as.matrix(c(1,2), dim=c(1,2))
multiplot(distance_plot, kde_plot, layout=as.matrix(c(1,2), dim=c(1,2)))
multiplot(distance_plot, kde_plot, layout=as.matrix(c(1,2), nrow=2, byrow=TRUE))
multiplot(distance_plot, kde_plot, layout=as.matrix(c(1,2), nrow=1, byrow=TRUE))
as.matrix(c(1,2), nrow=1, byrow=TRUE)
as.matrix(c(1,2), nrow=1)
multiplot(distance_plot, kde_plot, layout=matrix(c(1,2), nrow=1, byrow=TRUE))
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
multiplot(distance_plot, kde_plot, layout=as.matrix(c(1,2), nrow=2, byrow=TRUE))
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_mnr.R')
