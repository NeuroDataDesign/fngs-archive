scale_colour_discrete(name='Condition') +
theme(legend.position='bottom')
print(multiplot(plotlist=list(sp, func, conv), layout=matrix(c(1,1,2,3,3,3), nrow=2, byrow=TRUE)))
pi_vec <- t(apply(response, 1, function(x) x/sum(x))) # normalize the response
require('MASS')
require('clusterGeneration')
latent_signal <- array(0, dim=c(dim(conditions)[2], nt, nroi))
for (i in 1:dim(conditions)[2]) {
latent_signal[i,,] <- mvrnorm(n=nt, mu=rnorm(nroi), Sigma=genPositiveDefMat(nroi)$Sigma) # use random mu, random sigma for signals
}
# define the observed signal as a combination of the latent signals, where the contribution
# of each is the pi vector at that time step
observed_signal <- t(sapply(1:dim(latent_signal)[2], function(t) {
apply(pi_vec[t,]*latent_signal[,t,], 2, sum)
}))
pi_vec <- pi_vec[complete.cases(observed_signal),]
observed_signal <- observed_signal[complete.cases(observed_signal),]
true_means <- apply(latent_signal, c(1,3), mean)
true_cov <- sapply(1:dim(latent_signal)[1], function(x) cov(latent_signal[x,,]), simplify='array')
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/experiments/gmm_known_pi.R')
params <- gmm_known_pi(observed_signal, true_means, true_cov, pi_vec)
require(abind)
covs <- abind(true_cov, params$covs, along=3)
trials <- c()
labels <- c()
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "true", sep=" "))
}
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "predict", sep=" "))
}
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/reliability.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/computerank.R')
for (j in unique(trials)) {
plotlist <- list()
counter <- 0
for (i in which(trials == j)) {
counter <- counter + 1
plotlist[[counter]] <- ggplot(melt(covs[,,i]), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_x_discrete("ROI", limits=c(1, ceiling(nroi/2), nroi)) +
scale_y_discrete("ROI", limits=c(1, ceiling(nroi/2), nroi)) +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="Covariance", limits=c(-2*sd(covs), 3*sd(covs))) + ggtitle(labels[i])
}
print(multiplot(plotlist=plotlist, layout=matrix(c(1:counter), byrow=TRUE, nrow=1)))
}
D <- distance(covs)
mnr <- mnr(rdf(D, trials))
D <- melt(D)
for (i in 1:length(trials)) {
D[D$Var1 == i,]$Var1 <- labels[i]
D[D$Var2 == i,]$Var2 <- labels[i]
}
error <- c()
print(ggplot(D, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance") +
xlab("Matrix") + ylab("Matrix") + ggtitle(sprintf('MNR = %.4f', mnr)))
mnr
mnr <- array(NaN, dim=c(niter))
mnr
i
results
results
results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))
conditions <- array(0, dim=c(nt, nc)) # initialize empty condition vector
for (cond in 1:nc) {
conditions[seq((cond-1)*2 + 1, nt, nc*2 + length(window)), cond] <- 1
}
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/drivers/convolve_trial_onsets.R')
response <- convolve_conditions(conditions, window)
require('ggplot2')
require('reshape2')
require('Rmisc')
func <- ggplot(data = melt(window), aes(x = Var1, y = value)) + geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Non-Rectangular Response')
sp <- ggplot(data = melt(conditions), aes(x = Var1, y=value, group=factor(Var2), color=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Spike') + ggtitle('Spike Train of Condition Onset') +
theme(legend.position='none')
conv <- ggplot(data = melt(response), aes(x = Var1, y=value, color=factor(Var2), group=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Signal Present for Condition') +
scale_colour_discrete(name='Condition') +
theme(legend.position='bottom')
print(multiplot(plotlist=list(sp, func, conv), layout=matrix(c(1,1,2,3,3,3), nrow=2, byrow=TRUE)))
pi_vec <- t(apply(response, 1, function(x) x/sum(x))) # normalize the response
require('MASS')
require('clusterGeneration')
latent_signal <- array(0, dim=c(dim(conditions)[2], nt, nroi))
for (i in 1:dim(conditions)[2]) {
latent_signal[i,,] <- mvrnorm(n=nt, mu=rnorm(nroi), Sigma=genPositiveDefMat(nroi)$Sigma) # use random mu, random sigma for signals
}
# define the observed signal as a combination of the latent signals, where the contribution
# of each is the pi vector at that time step
observed_signal <- t(sapply(1:dim(latent_signal)[2], function(t) {
apply(pi_vec[t,]*latent_signal[,t,], 2, sum)
}))
pi_vec <- pi_vec[complete.cases(observed_signal),]
observed_signal <- observed_signal[complete.cases(observed_signal),]
true_means <- apply(latent_signal, c(1,3), mean)
true_cov <- sapply(1:dim(latent_signal)[1], function(x) cov(latent_signal[x,,]), simplify='array')
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/experiments/gmm_known_pi.R')
params <- gmm_known_pi(observed_signal, true_means, true_cov, pi_vec)
require(abind)
covs <- abind(true_cov, params$covs, along=3)
trials <- c()
labels <- c()
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "true", sep=" "))
}
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "predict", sep=" "))
}
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/reliability.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/computerank.R')
params
params$n
params$true_cov
params$covs
true_cov
diag(10)
conditions <- array(0, dim=c(nt, nc)) # initialize empty condition vector
for (cond in 1:nc) {
conditions[seq((cond-1)*2 + 1, nt, nc*2 + length(window)), cond] <- 1
}
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/drivers/convolve_trial_onsets.R')
response <- convolve_conditions(conditions, window)
require('ggplot2')
require('reshape2')
require('Rmisc')
func <- ggplot(data = melt(window), aes(x = Var1, y = value)) + geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Non-Rectangular Response')
sp <- ggplot(data = melt(conditions), aes(x = Var1, y=value, group=factor(Var2), color=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Spike') + ggtitle('Spike Train of Condition Onset') +
theme(legend.position='none')
conv <- ggplot(data = melt(response), aes(x = Var1, y=value, color=factor(Var2), group=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Signal Present for Condition') +
scale_colour_discrete(name='Condition') +
theme(legend.position='bottom')
print(multiplot(plotlist=list(sp, func, conv), layout=matrix(c(1,1,2,3,3,3), nrow=2, byrow=TRUE)))
pi_vec <- t(apply(response, 1, function(x) x/sum(x))) # normalize the response
require('MASS')
require('clusterGeneration')
latent_signal <- array(0, dim=c(dim(conditions)[2], nt, nroi))
for (i in 1:dim(conditions)[2]) {
latent_signal[i,,] <- mvrnorm(n=nt, mu=rnorm(nroi), Sigma=genPositiveDefMat(nroi)$Sigma) # use random mu, random sigma for signals
}
# define the observed signal as a combination of the latent signals, where the contribution
# of each is the pi vector at that time step
observed_signal <- t(sapply(1:dim(latent_signal)[2], function(t) {
apply(pi_vec[t,]*latent_signal[,t,], 2, sum)
}))
pi_vec <- pi_vec[complete.cases(observed_signal),]
observed_signal <- observed_signal[complete.cases(observed_signal),]
true_means <- apply(latent_signal, c(1,3), mean)
true_cov <- sapply(1:dim(latent_signal)[1], function(x) cov(latent_signal[x,,]), simplify='array')
predict_cov <- sapply(1:dim(latent_signal)[1], function(x) diag(nroi), simplify='array')
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/experiments/gmm_known_pi.R')
params <- gmm_known_pi(observed_signal, array(0, dim=c(nroi, 1)), predict_cov, pi_vec)
require(abind)
covs <- abind(true_cov, params$covs, along=3)
true_means
conditions <- array(0, dim=c(nt, nc)) # initialize empty condition vector
for (cond in 1:nc) {
conditions[seq((cond-1)*2 + 1, nt, nc*2 + length(window)), cond] <- 1
}
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/drivers/convolve_trial_onsets.R')
response <- convolve_conditions(conditions, window)
require('ggplot2')
require('reshape2')
require('Rmisc')
func <- ggplot(data = melt(window), aes(x = Var1, y = value)) + geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Non-Rectangular Response')
sp <- ggplot(data = melt(conditions), aes(x = Var1, y=value, group=factor(Var2), color=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Spike') + ggtitle('Spike Train of Condition Onset') +
theme(legend.position='none')
conv <- ggplot(data = melt(response), aes(x = Var1, y=value, color=factor(Var2), group=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Signal Present for Condition') +
scale_colour_discrete(name='Condition') +
theme(legend.position='bottom')
print(multiplot(plotlist=list(sp, func, conv), layout=matrix(c(1,1,2,3,3,3), nrow=2, byrow=TRUE)))
pi_vec <- t(apply(response, 1, function(x) x/sum(x))) # normalize the response
require('MASS')
require('clusterGeneration')
latent_signal <- array(0, dim=c(dim(conditions)[2], nt, nroi))
for (i in 1:dim(conditions)[2]) {
latent_signal[i,,] <- mvrnorm(n=nt, mu=rnorm(nroi), Sigma=genPositiveDefMat(nroi)$Sigma) # use random mu, random sigma for signals
}
# define the observed signal as a combination of the latent signals, where the contribution
# of each is the pi vector at that time step
observed_signal <- t(sapply(1:dim(latent_signal)[2], function(t) {
apply(pi_vec[t,]*latent_signal[,t,], 2, sum)
}))
pi_vec <- pi_vec[complete.cases(observed_signal),]
observed_signal <- observed_signal[complete.cases(observed_signal),]
true_means <- apply(latent_signal, c(1,3), mean)
true_cov <- sapply(1:dim(latent_signal)[1], function(x) cov(latent_signal[x,,]), simplify='array')
predict_cov <- sapply(1:dim(latent_signal)[1], function(x) diag(nroi), simplify='array')
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/experiments/gmm_known_pi.R')
params <- gmm_known_pi(observed_signal, array(0, dim=c(nc, nroi)), predict_cov, pi_vec)
require(abind)
covs <- abind(true_cov, params$covs, along=3)
trials <- c()
labels <- c()
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "true", sep=" "))
}
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "predict", sep=" "))
}
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/reliability.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/computerank.R')
for (j in unique(trials)) {
plotlist <- list()
counter <- 0
for (i in which(trials == j)) {
counter <- counter + 1
plotlist[[counter]] <- ggplot(melt(covs[,,i]), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_x_discrete("ROI", limits=c(1, ceiling(nroi/2), nroi)) +
scale_y_discrete("ROI", limits=c(1, ceiling(nroi/2), nroi)) +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="Covariance", limits=c(-2*sd(covs), 3*sd(covs))) + ggtitle(labels[i])
}
print(counter)
print(multiplot(plotlist=plotlist, layout=matrix(c(1:counter), byrow=TRUE, nrow=1)))
}
D <- distance(covs)
mnr <- mnr(rdf(D, trials))
D <- melt(D)
for (i in 1:length(trials)) {
D[D$Var1 == i,]$Var1 <- labels[i]
D[D$Var2 == i,]$Var2 <- labels[i]
}
error <- c()
print(ggplot(D, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance") +
xlab("Matrix") + ylab("Matrix") + ggtitle(sprintf('MNR = %.4f', mnr)))
i
one_iteration <- function(nt, nc, nroi, window) {
conditions <- array(0, dim=c(nt, nc)) # initialize empty condition vector
for (cond in 1:nc) {
conditions[seq((cond-1)*2 + 1, nt, nc*2 + length(window)), cond] <- 1
}
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/drivers/convolve_trial_onsets.R')
response <- convolve_conditions(conditions, window)
require('ggplot2')
require('reshape2')
require('Rmisc')
func <- ggplot(data = melt(window), aes(x = Var1, y = value)) + geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Non-Rectangular Response')
sp <- ggplot(data = melt(conditions), aes(x = Var1, y=value, group=factor(Var2), color=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Spike') + ggtitle('Spike Train of Condition Onset') +
theme(legend.position='none')
conv <- ggplot(data = melt(response), aes(x = Var1, y=value, color=factor(Var2), group=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Signal Present for Condition') +
scale_colour_discrete(name='Condition') +
theme(legend.position='bottom')
print(multiplot(plotlist=list(sp, func, conv), layout=matrix(c(1,1,2,3,3,3), nrow=2, byrow=TRUE)))
pi_vec <- t(apply(response, 1, function(x) x/sum(x))) # normalize the response
require('MASS')
require('clusterGeneration')
latent_signal <- array(0, dim=c(dim(conditions)[2], nt, nroi))
for (i in 1:dim(conditions)[2]) {
latent_signal[i,,] <- mvrnorm(n=nt, mu=rnorm(nroi), Sigma=genPositiveDefMat(nroi)$Sigma) # use random mu, random sigma for signals
}
# define the observed signal as a combination of the latent signals, where the contribution
# of each is the pi vector at that time step
observed_signal <- t(sapply(1:dim(latent_signal)[2], function(t) {
apply(pi_vec[t,]*latent_signal[,t,], 2, sum)
}))
pi_vec <- pi_vec[complete.cases(observed_signal),]
observed_signal <- observed_signal[complete.cases(observed_signal),]
true_means <- apply(latent_signal, c(1,3), mean)
true_cov <- sapply(1:dim(latent_signal)[1], function(x) cov(latent_signal[x,,]), simplify='array')
# predict a diagonal matrix for simple case
predict_cov <- sapply(1:dim(latent_signal)[1], function(x) diag(nroi), simplify='array')
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/experiments/gmm_known_pi.R')
# predict zero mean
params <- gmm_known_pi(observed_signal, array(0, dim=c(nc, nroi)), predict_cov, pi_vec)
require(abind)
covs <- abind(true_cov, params$covs, along=3)
trials <- c()
labels <- c()
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "true", sep=" "))
}
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "predict", sep=" "))
}
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/reliability.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/computerank.R')
for (j in unique(trials)) {
plotlist <- list()
counter <- 0
for (i in which(trials == j)) {
counter <- counter + 1
plotlist[[counter]] <- ggplot(melt(covs[,,i]), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_x_discrete("ROI", limits=c(1, ceiling(nroi/2), nroi)) +
scale_y_discrete("ROI", limits=c(1, ceiling(nroi/2), nroi)) +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="Covariance", limits=c(-2*sd(covs), 3*sd(covs))) + ggtitle(labels[i])
}
print(counter)
print(multiplot(plotlist=plotlist, layout=matrix(c(1:counter), byrow=TRUE, nrow=1)))
}
D <- distance(covs)
mnr <- mnr(rdf(D, trials))
D <- melt(D)
for (i in 1:length(trials)) {
D[D$Var1 == i,]$Var1 <- labels[i]
D[D$Var2 == i,]$Var2 <- labels[i]
}
error <- c()
print(ggplot(D, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance") +
xlab("Matrix") + ylab("Matrix") + ggtitle(sprintf('MNR = %.4f', mnr)))
return(list(covs=covs, mnr=mnr, D=D, error=error))
}
t <- 200
nc <- 2
nroi <- 10
one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))) # define a simple square window)
niter <- 100
mnr <- array(NaN, dim=c(niter))
D <- array(NaN, dim=c(niter, nroi, nroi))
for (i in 1:niter) {
results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))
mnr[i] <- results$mnr
D[i,,] <- results$D
}
mnr
dim(D_ar)
niter <- 100
mnr_ar <- array(NaN, dim=c(niter))
D_ar <- array(NaN, dim=c(niter, nroi, nroi))
for (i in 1:niter) {
results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))
mnr_ar[i] <- results$mnr
D_ar[i,,] <- results$D
}
print(paste("Mean MNR", mean(mnr_ar)))
dim(D_ar)
dim(results$D)
results
one_iteration <- function(nt, nc, nroi, window) {
conditions <- array(0, dim=c(nt, nc)) # initialize empty condition vector
for (cond in 1:nc) {
conditions[seq((cond-1)*2 + 1, nt, nc*2 + length(window)), cond] <- 1
}
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/drivers/convolve_trial_onsets.R')
response <- convolve_conditions(conditions, window)
require('ggplot2')
require('reshape2')
require('Rmisc')
func <- ggplot(data = melt(window), aes(x = Var1, y = value)) + geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Non-Rectangular Response')
sp <- ggplot(data = melt(conditions), aes(x = Var1, y=value, group=factor(Var2), color=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Spike') + ggtitle('Spike Train of Condition Onset') +
theme(legend.position='none')
conv <- ggplot(data = melt(response), aes(x = Var1, y=value, color=factor(Var2), group=factor(Var2))) +
geom_line() +
xlab('Time Point') + ylab('Relative Response') + ggtitle('Signal Present for Condition') +
scale_colour_discrete(name='Condition') +
theme(legend.position='bottom')
print(multiplot(plotlist=list(sp, func, conv), layout=matrix(c(1,1,2,3,3,3), nrow=2, byrow=TRUE)))
pi_vec <- t(apply(response, 1, function(x) x/sum(x))) # normalize the response
require('MASS')
require('clusterGeneration')
latent_signal <- array(0, dim=c(dim(conditions)[2], nt, nroi))
for (i in 1:dim(conditions)[2]) {
latent_signal[i,,] <- mvrnorm(n=nt, mu=rnorm(nroi), Sigma=genPositiveDefMat(nroi)$Sigma) # use random mu, random sigma for signals
}
# define the observed signal as a combination of the latent signals, where the contribution
# of each is the pi vector at that time step
observed_signal <- t(sapply(1:dim(latent_signal)[2], function(t) {
apply(pi_vec[t,]*latent_signal[,t,], 2, sum)
}))
pi_vec <- pi_vec[complete.cases(observed_signal),]
observed_signal <- observed_signal[complete.cases(observed_signal),]
true_means <- apply(latent_signal, c(1,3), mean)
true_cov <- sapply(1:dim(latent_signal)[1], function(x) cov(latent_signal[x,,]), simplify='array')
# predict a diagonal matrix for simple case
predict_cov <- sapply(1:dim(latent_signal)[1], function(x) diag(nroi), simplify='array')
source('C:/Users/ebrid/Documents/GitHub/memory/code/R/experiments/gmm_known_pi.R')
# predict zero mean
params <- gmm_known_pi(observed_signal, array(0, dim=c(nc, nroi)), predict_cov, pi_vec)
require(abind)
covs <- abind(true_cov, params$covs, along=3)
trials <- c()
labels <- c()
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "true", sep=" "))
}
for (i in 1:nc) {
trials <- c(trials, paste(i))
labels <- c(labels, paste(i, "predict", sep=" "))
}
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/distance.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/reliability.R')
source('C:/Users/ebrid/Documents/GitHub/Reliability/Code/FlashRupdated/functions/computerank.R')
for (j in unique(trials)) {
plotlist <- list()
counter <- 0
for (i in which(trials == j)) {
counter <- counter + 1
plotlist[[counter]] <- ggplot(melt(covs[,,i]), aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_x_discrete("ROI", limits=c(1, ceiling(nroi/2), nroi)) +
scale_y_discrete("ROI", limits=c(1, ceiling(nroi/2), nroi)) +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="Covariance", limits=c(-2*sd(covs), 3*sd(covs))) + ggtitle(labels[i])
}
print(counter)
print(multiplot(plotlist=plotlist, layout=matrix(c(1:counter), byrow=TRUE, nrow=1)))
}
Dmtx <- distance(covs)
mnr <- mnr(rdf(Dmtx, trials))
D <- melt(Dmtx)
for (i in 1:length(trials)) {
D[D$Var1 == i,]$Var1 <- labels[i]
D[D$Var2 == i,]$Var2 <- labels[i]
}
error <- c()
print(ggplot(D, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue","blue","purple","green","yellow"),name="distance") +
xlab("Matrix") + ylab("Matrix") + ggtitle(sprintf('MNR = %.4f', mnr)))
return(list(covs=covs, mnr=mnr, D=Dmtx, error=error))
}
t <- 200
nc <- 2
nroi <- 10
one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))) # define a simple square window)
1:10
invisible(1:10)
test <- invisible(1:10)
a <- invisible(one_iteration(t, nc, nroi, array(rev(c(0,1,1,1,1,0)))))
a
invisible(one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))))
hide <- capture.output(results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))))
results <- invisible(one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))))
results <- invisible(one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))))))
results <- invisible(one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))))))
results <- invisible(one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))))
capture.output(results <- (one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))))
results
test <- capture.output(results <- (one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))))
test
niter <- 100
mnr_ar <- array(NaN, dim=c(niter))
D_ar <- array(NaN, dim=c(niter, nc*2, nc*2))
for (i in 1:niter) {
sink('/dev/null')
sink(results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))))
mnr_ar[i] <- results$mnr
D_ar[i,,] <- results$D
}
sink('/dev/null')
sink(results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0))))))
sink(results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))))
sink(results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))), file=NULL)
sink(NULL)
sink(results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))))
niter <- 100
mnr_ar <- array(NaN, dim=c(niter))
D_ar <- array(NaN, dim=c(niter, nc*2, nc*2))
for (i in 1:niter) {
sink(NULL)
sink(results <- one_iteration(t, nc, nroi, array(rev(c(0, 1, 1, 1, 1, 0)))), file=NULL)
mnr_ar[i] <- results$mnr
D_ar[i,,] <- results$D
}
source('~/GitHub/ugrad-data-design-team-0/data_processing/Rutils/check_individual_mnr.R')
test <- ts
test <- melt(ts$`1`)
test
ggplot(test, aes(x=Var1, y=value, group=Var2, color=Var2)) + geom_line() + ggtitle('Example of a ROI Timeseries from the BNU1 dataset') + theme(text=element_text(size=20))
ggplot(test, aes(x=Var1, y=value, group=Var2, color=Var2)) + geom_line() + ggtitle('Example of a ROI Timeseries from the BNU1 dataset') + theme(text=element_text(size=20)) + xlabel('Timestep') + ylabel('Value')
ggplot(test, aes(x=Var1, y=value, group=Var2, color=Var2)) + geom_line() + ggtitle('Example of a ROI Timeseries from the BNU1 dataset') + theme(text=element_text(size=20)) + xlab('Timestep') + ylab('Intensity')
ggplot(test, aes(x=Var1, y=value, group=Var2, color=Var2)) + geom_line() + ggtitle('Example of a ROI Timeseries from the BNU1 dataset') + theme(text=element_text(size=20), legend.position='none') + xlab('Timestep') + ylab('Intensity')
ts$`1`
ts$`1`[1:50,]
test <- melt(ts$`1`[1:50,])
ggplot(test, aes(x=Var1, y=value, group=Var2, color=Var2)) + geom_line() + ggtitle('Example of a ROI Timeseries from the BNU1 dataset') + theme(text=element_text(size=20), legend.position='none') + xlab('Timestep') + ylab('Intensity')
test <- melt(ts$`1`[1:30,])
ggplot(test, aes(x=Var1, y=value, group=Var2, color=Var2)) + geom_line() + ggtitle('Example of a ROI Timeseries from the BNU1 dataset') + theme(text=element_text(size=20), legend.position='none') + xlab('Timestep') + ylab('Intensity')
test <- melt(ts$`1`[1:10,])
ggplot(test, aes(x=Var1, y=value, group=Var2, color=Var2)) + geom_line() + ggtitle('Example of a ROI Timeseries from the BNU1 dataset') + theme(text=element_text(size=20), legend.position='none') + xlab('Timestep') + ylab('Intensity')
test <- melt(ts$`1`[,])
ggplot(test, aes(x=Var1, y=value, group=Var2, color=Var2)) + geom_line() + ggtitle('Example of a ROI Timeseries from the BNU1 dataset') + theme(text=element_text(size=20), legend.position='none') + xlab('Timestep') + ylab('Intensity')
